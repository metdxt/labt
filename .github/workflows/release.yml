name: Release Build for labt

# Trigger the workflow on pushes to tags matching v*.*.* (e.g., v1.0.0, v0.1.2)
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  # Job to build for Linux x86_64
  build_linux_x86_64:
    name: Build Linux (x86_64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu

      - name: Install Linux dependencies (dbus & alsa)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libdbus-1-dev libasound2-dev pkg-config

      - name: Build binary
        run: cargo build --release --target x86_64-unknown-linux-gnu --verbose

      - name: Package artifact
        run: |
          mkdir dist
          cp target/x86_64-unknown-linux-gnu/release/labt dist/labt-linux-x86_64
          tar -czvf labt-linux-x86_64.tar.gz -C dist .

      - name: Upload artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: labt-linux-x86_64 # Unique name for the artifact
          path: labt-linux-x86_64.tar.gz

  # Job to build for Windows x86_64
  build_windows_x86_64:
    name: Build Windows (x86_64)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc

      # No specific dbus/alsa dependencies needed for Windows build typically
      - name: Build binary
        run: cargo build --release --target x86_64-pc-windows-msvc --verbose

      - name: Package artifact
        shell: pwsh # Use PowerShell for Compress-Archive
        run: |
          mkdir dist
          cp target/x86_64-pc-windows-msvc/release/labt.exe dist/labt-windows-x86_64.exe
          Compress-Archive -Path dist/* -DestinationPath labt-windows-x86_64.zip

      - name: Upload artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: labt-windows-x86_64 # Unique name for the artifact
          path: labt-windows-x86_64.zip

  # Job to build for Linux aarch64 (cross-compilation)
  build_linux_aarch64:
    name: Build Linux (aarch64)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-unknown-linux-gnu

      - name: Configure apt for arm64 cross-compilation
        run: |
          sudo dpkg --add-architecture arm64
          sudo sed -i 's/^deb http/deb [arch=amd64] http/' /etc/apt/sources.list
          find /etc/apt/sources.list.d/ -type f -name '*.list' -exec sudo sed -i 's/^deb http/deb [arch=amd64] http/' {} +
          find /etc/apt/sources.list.d/ -type f -name '*.sources' -exec sudo sed -i -e '/^Types: deb/a Architectures: amd64' {} + || echo "No .sources files found or sed failed, continuing..."
          UBUNTU_CODENAME=$(lsb_release -cs)
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_CODENAME} main restricted universe multiverse" | sudo tee /etc/apt/sources.list.d/arm64-ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_CODENAME}-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64-ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_CODENAME}-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64-ports.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${UBUNTU_CODENAME}-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list.d/arm64-ports.list
          sudo apt-get update -y

      - name: Install cross-compilation dependencies (aarch64 C runtime, dbus & alsa)
        run: |
          # Install cross-compiler, C runtime dev files, and arm64 libs
          sudo apt-get install -y --no-install-recommends \
            gcc-aarch64-linux-gnu \
            libc6-dev:arm64 \
            libdbus-1-dev:arm64 \
            libasound2-dev:arm64 \
            pkg-config
          # Ensure pkg-config can find the cross-compiled libraries
          sudo mkdir -p /usr/lib/aarch64-linux-gnu/pkgconfig
          if [ -d "/usr/lib/aarch64-linux-gnu/pkgconfig" ] && [ "$(ls -A /usr/lib/aarch64-linux-gnu/pkgconfig)" ]; then
            sudo ln -sf /usr/lib/aarch64-linux-gnu/pkgconfig/* /usr/share/pkgconfig/ || echo "Symlinks might already exist or source is empty."
          else
            echo "Skipping symlink creation as /usr/lib/aarch64-linux-gnu/pkgconfig is empty or does not exist."
          fi

      - name: Build binary (cross-compile)
        # Set environment variables needed for cross-compiling C dependencies
        run: |
          export PKG_CONFIG_ALLOW_CROSS=1
          export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          # Explicitly tell rustc where to find the arm64 libraries if needed
          # Usually the linker finds them via pkg-config, but this can sometimes help
          export RUSTFLAGS="-L native=/usr/lib/aarch64-linux-gnu"
          cargo build --release --target aarch64-unknown-linux-gnu --verbose
        env:
          DBUS_SYS_USE_PKG_CONFIG: 1
          ALSA_SYS_USE_PKG_CONFIG: 1

      - name: Package artifact
        run: |
          mkdir dist
          cp target/aarch64-unknown-linux-gnu/release/labt dist/labt-linux-aarch64
          tar -czvf labt-linux-aarch64.tar.gz -C dist .

      - name: Upload artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: labt-linux-aarch64
          path: labt-linux-aarch64.tar.gz

  # Job to create the GitHub Release
  create_release:
    name: Create GitHub Release
    # This job runs only after all specified build jobs are successful
    needs: [build_linux_x86_64, build_windows_x86_64, build_linux_aarch64]
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permission needed to create releases and upload assets

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts into the 'artifacts' directory

      - name: List downloaded files (for debugging)
        run: ls -R artifacts

      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          # Define the pattern to find assets within the downloaded artifact directories
          artifacts: "artifacts/*/*"
          # Use the default GITHUB_TOKEN provided by Actions
          token: ${{ secrets.GITHUB_TOKEN }}
          # Automatically generate release notes from commits since the last tag
          generateReleaseNotes: true
          # Allow the action to overwrite assets if the tag is pushed again (useful for fixes)
          allowUpdates: true